// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//code to create an migration: "yarn prisma migrate dev"


model User {
  id String @id @default(uuid())
  name String
  email String
  password String

  status Boolean @default(true)
  admin_mode Boolean @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  
  @@map("users") //descrevendo o nome da tabela
  tasks Task [] //informando que o usuário pode conter vários insurances nela
  comments Comment [] //informando que o usuário pode conter vários comments nela
}

model Customer {
  id String @id @default(uuid())
  cpf String
  name String
  phoneNumber String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  
  @@map("customers") //descrevendo o nome da tabela
  tasks Task [] //informando que o usuário pode conter vários insurances nela
}

model Category {
  id String @id @default(uuid())
  name String 

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("categories") //descrevendo o nome da tabela
  tasks Task[] //informando que a tabela pode conter vários insurances referenciados a ela
}

model Branch {
  id String @id @default(uuid())
  name String 

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("branches") //descrevendo o nome da tabela
  tasks Task[] //informando que a tabela pode conter vários insurances referenciados a ela
}


model Task {
  id String @id @default(uuid())
  description String
  status Boolean @default(false)

  vehicleName String
  vehicleYear String
  vehiclePrice String

  user_id String
  branch_id String
  category_id String
  customer_id String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  user User @relation(fields: [user_id], references: [id]) //referenciando o campo para o nó da outra tabela
  branch Branch @relation(fields: [branch_id], references: [id]) //referenciando o campo para o nó da outra tabela
  category Category @relation(fields: [category_id], references: [id]) //referenciando o campo para o nó da outra tabela
  customer Customer @relation(fields: [customer_id], references: [id]) //referenciando o campo para o nó da outra tabela

  @@map("tasks") ///descrevendo o nome da tabela
  comments Comment [] //informando que a tabela pode conter vários comentários nela
}

model Comment {
  id String @id @default(uuid())
  text String

  
  user_id String
  task_id String
  
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("comments") //descrevendo o nome da tabela
  tasks Task @relation(fields: [task_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}